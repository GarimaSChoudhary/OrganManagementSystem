/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.CreateAdmin;


import Business.EcoSystem;
import Business.Employee.Employee;
import Business.Enterprise.Enterprise;
import Business.Enterprise.OrganBankEnterprise;
import Business.Network.Network;
import Business.Organization.Facilities;
import Business.Organization.Organization;
import Business.Organization.OrganizationDirectory;
import Business.Users.Users;
import Business.WorkQueue.OrganMatchWorkRequest;
import Business.WorkQueue.OrganProcureWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author namangupta
 */
public class ManageOrgan extends javax.swing.JPanel {

    
    JPanel userProcessContainer;
    OrganizationDirectory organizationDirectory; 
    Enterprise enterprise;
    EcoSystem ecoSystem;
    Network network;
    
    /**
     * Creates new form ManageOrgan
     */
    public ManageOrgan(JPanel userProcessContainer, OrganizationDirectory organizationDirectory, Enterprise enterprise,EcoSystem ecoSystem,Network network) {
        initComponents();
        this.userProcessContainer=userProcessContainer;
        this.organizationDirectory=organizationDirectory;
        this.enterprise=enterprise;
        this.ecoSystem=ecoSystem;
        this.network=network;
        
        initComponents();
        populateJTableData();
        populateComboBoxesData();
        matchDonorWithPatient();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tblPatientData = new javax.swing.JScrollPane();
        tblOrganworkRequests = new javax.swing.JTable();
        btnAssignRequest = new javax.swing.JButton();
        cmbxfacilityProcurement = new javax.swing.JComboBox<>();
        btnProcureOrgan = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblDonorData = new javax.swing.JTable();
        lblTitle = new javax.swing.JLabel();
        btnBack = new javax.swing.JButton();
        lblMatch = new javax.swing.JLabel();

        tblOrganworkRequests.setForeground(new java.awt.Color(153, 51, 0));
        tblOrganworkRequests.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Patient ID", "Patient Name", "OrgansRequired", "Doctor", "Comments", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblOrganworkRequests.setSelectionBackground(new java.awt.Color(255, 153, 153));
        tblOrganworkRequests.setSelectionForeground(new java.awt.Color(255, 255, 51));
        tblPatientData.setViewportView(tblOrganworkRequests);

        btnAssignRequest.setBackground(new java.awt.Color(0, 102, 153));
        btnAssignRequest.setForeground(new java.awt.Color(255, 255, 255));
        btnAssignRequest.setText("Assign");
        btnAssignRequest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAssignRequestActionPerformed(evt);
            }
        });

        cmbxfacilityProcurement.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbxfacilityProcurement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbxfacilityProcurementActionPerformed(evt);
            }
        });

        btnProcureOrgan.setBackground(new java.awt.Color(0, 102, 153));
        btnProcureOrgan.setForeground(new java.awt.Color(255, 255, 255));
        btnProcureOrgan.setText("Procure");
        btnProcureOrgan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProcureOrganActionPerformed(evt);
            }
        });

        tblDonorData.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Donor Patient", "Donor Doctor", "Organ", "Receiving patient", "Receiving Doctor", "Status"
            }
        ));
        jScrollPane2.setViewportView(tblDonorData);

        lblTitle.setFont(new java.awt.Font("Cambria", 1, 18)); // NOI18N
        lblTitle.setText("Organ Procurement Requests");

        btnBack.setBackground(new java.awt.Color(0, 102, 153));
        btnBack.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnBack.setForeground(new java.awt.Color(255, 255, 255));
        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        lblMatch.setText("Organ Matching Requests");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblMatch)
                    .addComponent(btnBack)
                    .addComponent(lblTitle)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(btnProcureOrgan, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(38, 38, 38)
                            .addComponent(cmbxfacilityProcurement, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(28, 28, 28)
                            .addComponent(btnAssignRequest, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(tblPatientData, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 590, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(294, 294, 294))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addComponent(lblTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(tblPatientData, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnProcureOrgan, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbxfacilityProcurement, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAssignRequest, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addComponent(lblMatch)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnAssignRequestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAssignRequestActionPerformed
        // TODO add your handling code here:

        if(cmbxfacilityProcurement.getSelectedIndex() == 0) {
            JOptionPane.showMessageDialog(null, "Please select a Procurement Team");
            return;
        }
        int selectedRow = tblOrganworkRequests.getSelectedRow();
        if(selectedRow < 0) {
            JOptionPane.showMessageDialog(null,"Select request to assign Procurement", "Warining", JOptionPane.WARNING_MESSAGE);
            return;
        }

        OrganProcureWorkRequest orgwr = (OrganProcureWorkRequest)tblOrganworkRequests.getValueAt(selectedRow, 0);

        if(!orgwr.getStatus().equals("Work Started")){
            JOptionPane.showMessageDialog(null,"Request should be procured first", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        for(Organization orga  : organizationDirectory.getListOfOrganizations()) {

            if( orga instanceof Facilities){
                //System.out.println(org.getName()+":"+((Facilities) org).getCounter());
                if(orga.getOrgName().equalsIgnoreCase(cmbxfacilityProcurement.getSelectedItem().toString())){
                    orga.getWorkQueue().getWorkRequestList().add((OrganProcureWorkRequest)tblOrganworkRequests.getValueAt(selectedRow, 0));
                    ((Facilities) orga).setCounterNumber(1);
                }
            }
        }
        orgwr.setStatus("Assigned");
        orgwr.setTeam(cmbxfacilityProcurement.getSelectedItem().toString());
        populateJTableData();
        populateComboBoxesData();
    }//GEN-LAST:event_btnAssignRequestActionPerformed

    private void cmbxfacilityProcurementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbxfacilityProcurementActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbxfacilityProcurementActionPerformed

    private void btnProcureOrganActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProcureOrganActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblOrganworkRequests.getSelectedRow();
        if(selectedRow < 0) {
            JOptionPane.showMessageDialog(null,"Please Select a row from table first", "Warining", JOptionPane.WARNING_MESSAGE);
            return;
        }

        OrganProcureWorkRequest orgwr = (OrganProcureWorkRequest)tblOrganworkRequests.getValueAt(selectedRow, 0);
        if(orgwr.getStatus().equalsIgnoreCase("procurement requested")) {
            orgwr.setStatus("Work Started");
        }

        else {
            JOptionPane.showMessageDialog(null, "Order is already ready Procured");
            return;
        }

        populateJTableData();
    }//GEN-LAST:event_btnProcureOrganActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_btnBackActionPerformed

    
    public void matchDonorWithPatient(){
        DefaultTableModel model = (DefaultTableModel) tblDonorData.getModel();
        model.setRowCount(0);
        
        for(Network network: ecoSystem.getNetworkList()){
            if(network.getName().equalsIgnoreCase(network.getName())) { 
                for(Enterprise enterprise: network.getEnterpriseList().getEnterpriseList()){
                    if(enterprise instanceof OrganBankEnterprise){
                        if(enterprise.getWorkQueue()== null){
                            System.out.println("catched by repears");
                            break;
                        }
                        for(WorkRequest workRequest: enterprise.getWorkQueue().getWorkRequestList()){
                            if(workRequest.getStatus().equalsIgnoreCase("procurement requested") ||workRequest.getStatus().equalsIgnoreCase("work started")|| workRequest.getStatus().equalsIgnoreCase("Assigned") ||workRequest.getStatus().equalsIgnoreCase("InProcess")|| workRequest.getStatus().equalsIgnoreCase("Completed")){
                            if(workRequest instanceof OrganMatchWorkRequest){  
                            OrganMatchWorkRequest opr = (OrganMatchWorkRequest)workRequest;
                      
                            Object[] row = new Object[6];
                            row[0] = opr.getDonpatient().getPatientName();
                            row[1] = opr.getDonpatient().getDoctor();
                            row[2] = opr.getOrgan();
                            row[3] = opr.getRecpatient().getPatientName();
                            row[4] = opr.getRecpatient().getDoctor();
                            row[5] = opr.getStatus();
                            model.addRow(row);
                            }
                        }
                    }
                }
            }
            }
        }   
    }
    
    
    private void populateJTableData() {
       

        DefaultTableModel model = (DefaultTableModel) tblOrganworkRequests.getModel();
         model.setRowCount(0);
         for(Network n: ecoSystem.getNetworkList()){

            if(n.getName().equalsIgnoreCase(network.getName())) { 
            for(Enterprise enterprise: n.getEnterpriseList().getEnterpriseList()){
                if(enterprise instanceof OrganBankEnterprise){
                    if(enterprise.getWorkQueue()== null){
                        System.out.println("catched by repears");
                      break;
                    }
                    for(WorkRequest wr: enterprise.getWorkQueue().getWorkRequestList()){
                        if(wr.getStatus().equalsIgnoreCase("procurement requested") ||wr.getStatus().equalsIgnoreCase("work started")|| wr.getStatus().equalsIgnoreCase("Assigned") ||wr.getStatus().equalsIgnoreCase("InProcess")||wr.getStatus()==null|| wr.getStatus().equalsIgnoreCase("Completed")){
                            if(wr instanceof OrganProcureWorkRequest){
                            OrganProcureWorkRequest organProcurementWorkRequest = (OrganProcureWorkRequest)wr;
                            String a ="";
                            for( String s: organProcurementWorkRequest.getOrganList()){
                                a= s+";"+a;
                            }
                            Object[] row = new Object[6];
                            row[0] = organProcurementWorkRequest;
                            row[1] = organProcurementWorkRequest.getPatient().getPatientName();
                            row[2] = a;
                            row[3] = organProcurementWorkRequest.getPatient().getDoctor();
                            row[4] = organProcurementWorkRequest.getMessage();
                            row[5] = organProcurementWorkRequest.getStatus();
                            model.addRow(row);
                            }
                        }
                    }
                }
            }
            }
        }

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAssignRequest;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnProcureOrgan;
    private javax.swing.JComboBox<String> cmbxfacilityProcurement;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblMatch;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTable tblDonorData;
    private javax.swing.JTable tblOrganworkRequests;
    private javax.swing.JScrollPane tblPatientData;
    // End of variables declaration//GEN-END:variables
    private void populateComboBoxesData() {
        
        cmbxfacilityProcurement.removeAllItems();
        cmbxfacilityProcurement.addItem("--Select--");
        for(Organization org  : organizationDirectory.getListOfOrganizations()) {
           
           if( org instanceof Facilities){
               if(((Facilities) org).getCounterNumber()==0){
               cmbxfacilityProcurement.addItem(org.getOrgName());}
           }   
    }}

}
